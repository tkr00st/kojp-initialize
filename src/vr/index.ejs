<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-Uh-Compatible" content="ie=edge">
  <meta name="format-detection" content="telephone=no">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <script>
    (function (d) {
      var config = {
          kitId: 'xcm6mon',
          scriptTimeout: 3000,
          async: true
        },
        h = d.documentElement,
        t = setTimeout(function () {
          h.className = h.className.replace(/\bwf-loading\b/g, "") + " wf-inactive";
        }, config.scriptTimeout),
        tk = d.createElement("script"),
        f = false,
        s = d.getElementsByTagName("script")[0],
        a;
      h.className += " wf-loading";
      tk.src = 'https://use.typekit.net/' + config.kitId + '.js';
      tk.async = true;
      tk.onload = tk.onreadystatechange = function () {
        a = this.readyState;
        if (f || a && a != "complete" && a != "loaded") return;
        f = true;
        clearTimeout(t);
        try {
          Typekit.load(config)
        } catch (e) {}
      };
      s.parentNode.insertBefore(tk, s)
    })(document);

  </script>
  <link rel="stylesheet" href="/css/faq/style.css">
  <title>Document</title>
</head>

<body>
  <div class="global-wrapper">
    <%- include('../component/_header') %>
    <main class="main-content-wrapper">

      <h2 class="content-page-title">What is VR? / VR使ってなにができる？</h2>

        <div class="contact-primary__description">
          近い将来、スマホと同じようにVRで仕事をしたり遊んだりするのは当たり前になるかも。自分たちでもVRを使いながらなにができるのかを実験中です。メンバー：<a href="https://www.facebook.com/takuro.sato1212" rel="noopener" target="_blank">佐藤拓朗</a>、ウチヤマケンイチ
        </div>
        <div class="contact-primary__primary-how">
          <ul>
            <li>
              <dl>
                <dt class="">ハンドトラッキングを試してみる</dt>
                <dd class="">VRやARと一緒に使われそうなハンドトラッキング。ほとんどのPCやスマホにはカメラも付いてるから、まずはこういうところから広がりそう。
                </dd>
              </dl>
            </li>
          </ul>
        </div>

      <div class="pipe-container">
        <div class="ui-block">
          <div>
            <button id="PIPE_START">start</button>
            <button id="PIPE_STOP">stop</button>
            <button id="PIPE_SWITCH">switch</button>
          </div>
        </div>
        <div class="camera-block">
          <video id="IN_CAMERA" class="in-camera" autoplay playsinline="true"></video>
          <canvas id="OUT_OUTPUT" class="out-output" width="400" height="400"></canvas>
        </div>
      </div>

      <div class="contact-bye-text">
        ちなみに、一緒にVRについて勉強する仲間も募集しています。
      </div>

      <div class="contact-btn">
        <a href="/contact/">VR仲間募集中です</a>
      </div>

    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js">
    </script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js">
    </script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js">
    </script>
    <script>
      (function () {
        const inCameraVideo = document.getElementById('IN_CAMERA');
        const outputCanvas = document.getElementById('OUT_OUTPUT');
        const ctx = outputCanvas.getContext('2d');
        const cameraEnv = {
          environment: 'environment',
          user: 'user'
        };
        let defaultCameraEnv = cameraEnv.environment;

        const config = {
          locateFile: file => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`
        };

        const hands = new Hands(config);

        const createCamera = (cameraVideo, mode, width, height) => {
          return new Camera(cameraVideo, {
            onFrame: async () => {
              await hands.send({ image: cameraVideo });
            },
            facingMode: mode,
            width: width,
            height, height
          });
        };

        let nowCamera = createCamera(inCameraVideo, defaultCameraEnv, 400, 400);

        const switchCamera = () => {
          defaultCameraEnv = defaultCameraEnv === cameraEnv.environment ?
            cameraEnv.user : cameraEnv.environment;
          nowCamera.stop();
          nowCamera = false;
          nowCamera = createCamera(inCameraVideo, defaultCameraEnv, 400, 400);
          nowCamera.start();
        };

        hands.setOptions({
          maxNumHands: 2,
          modelComplexity: 1,
          minDetectionConfidence: 0.5,
          minTrackingConfidence: 0.5
        });

        document.getElementById('PIPE_START')
          .addEventListener('click', () => nowCamera.start());

        document.getElementById('PIPE_STOP')
          .addEventListener('click', () => nowCamera.stop());

        document.getElementById('PIPE_SWITCH')
          .addEventListener('click', () => switchCamera());

        let thumbTipX = 0;
        let thumbTipY = 0;
        let indexTipX = 0;
        let indexTipY = 0;
        let before = 0;
        let now = 0;

        function getDistanse(x2, x1, y2, y1) {
          const distanse = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y2, 2));
          return distanse;
        };

        hands.onResults(results => {
          ctx.clearRect(0, 0, outputCanvas.width, outputCanvas.height);
          if (results.multiHandLandmarks?.length > 0) {
            results.multiHandLandmarks.forEach(marks => {
              drawConnectors(ctx, marks, HAND_CONNECTIONS, { color: '#0f0' });
              drawLandmarks(ctx, marks, { color: '#f00' });
            })
          }
        });
      })();
    </script>
    <style>
      .pipe-container {
        position: relative;
        margin: 0 -24px;
        overflow: hidden;
      }

      .camera-block {
        position: relative;
        width: 400px;
        height: 400px;
        margin: 0 auto;
      }

      .in-camera {
        position: absolute;
      }

      .out-output {
        position: absolute;
      }

      .ui-block {
        display: flex;
        justify-content: center;
        margin-bottom: 4px;
      }

      .ui-block > div {
        display: inline-flex;
        padding: 20px;
        background: #0000004a;
      }

      .ui-block button {
        background-color: #fff;
        font-family: sans-serif;
        padding: 4px 8px;
        margin: 0 4px;
        border: 1px solid #888;
        border-radius: 4px;
      }
    </style>
    </main>

    <%- include('../component/_footer') %>

  </div>
  <script src="/js/top/script.js"></script>
  <script src="/js/faq/script.js"></script>
</body>

</html>
